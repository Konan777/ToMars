  http://www.lagom.nl/lcd-test/inversion.php
  
  // aborting Task
  int Foo(CancellationToken token)
{
    Thread t = Thread.CurrentThread;
    using (token.Register(t.Abort))
    {
        // compute-bound work here
    }
}

        private async void GenBindingRules()
        {
            if (CancellationContext.Current != null && CancellationContext.Current.IsCancellationRequested)
                return;
            
            // Кэшируем данные
            Dictionary<string, AdEngineCampaign> aecDic = new Dictionary<string, AdEngineCampaign>();
            Dictionary<int, int> profDetLvl = new Dictionary<int, int>();
            Atom baseAtom = null;
            int lastAtomId = 0;

            using (var ctx = new EleanorCoreEntities())
            {
                ((IObjectContextAdapter)ctx).ObjectContext.CommandTimeout = int.MaxValue;

                baseAtom = ctx.Atoms.FirstOrDefault(f => f.Id == 132);
                lastAtomId = ctx.Atoms.Where(w => w.Id < 10000).Max(m => m.Id);

                foreach (var c in ctx.AdEngineCampaigns.Where(w => w.AdEngineId == 4).ToList())
                    if (!aecDic.ContainsKey($"{c.ProfileId}:{c.CampaignId}"))
                        aecDic.Add($"{c.ProfileId}:{c.CampaignId}", c);

                foreach (var p in ctx.FacebookProfiles)
                    profDetLvl.Add(p.Id, p.DetailLevel);

            }
            
            // Найдем записи для которых нет данных в AdEngineCampaign
            // Только уникальные для Профиль/кампания/группа/объявление
            HashSet<string> exists = new HashSet<string>();
            List<Couple> toProcess = new List<Couple>();
            foreach (var row in _rawData)
            {
                var detailLevel = profDetLvl[row.ProfileId];
                string campKey="";
                long campaignId = 0;
                switch (detailLevel)
                {
                    case 0:
                        if (_detailLevel == 1)
                        {
                            campKey = row.ProfileId.ToString() + ":" + row.CampaignId.ToString();
                            campaignId = row.CampaignId;
                        }

                        if (_detailLevel == 2)
                        {
                            campKey = row.ProfileId.ToString() + ":" + row.AdSetId.ToString();
                            campaignId = row.AdSetId;
                        }

                        if (_detailLevel == 3)
                        {
                            campKey = row.ProfileId.ToString() + ":" + row.AdId.ToString();
                            campaignId = row.AdId;
                        }

                        break;
                    case 1:
                        campKey = row.ProfileId.ToString() + ":" + row.CampaignId.ToString();
                        campaignId = row.CampaignId;
                        break;
                    case 2:
                        campKey = row.ProfileId.ToString() + ":" + row.AdSetId.ToString();
                        campaignId = row.AdSetId;
                        break;
                    case 3:
                        campKey = row.ProfileId.ToString() + ":" + row.AdId.ToString();
                        campaignId = row.AdId;
                        break;
                }

                AdEngineCampaign campaign = null;
                if (aecDic.ContainsKey(campKey))
                    campaign = aecDic[campKey];
                
                // Нет данных в AdEngineCampaign для кампании или группы или объявления
                string key = $"{row.ProfileId}:{row.CampaignId}:{row.AdSetId}:{row.AdId}";
                if (campaign == null && !exists.Contains(key))
                {
                    toProcess.Add(new Couple() {DataRaw = row, CampaignId = campaignId});
                    exists.Add(key);
                }
            }

            // Получим AdCreative из API
            List<Action> readers = new List<Action>();
            var token = _token;
            foreach (var row in toProcess)
            {
                var tuple = Tuple.Create(row, row.DataRaw, new FacebookReader(token));
                readers.Add(() => { tuple.Item1.Tags = GetUrlTags(tuple.Item2, tuple.Item3); });
            }
            var worker = new ParallelWorker(readers, 10);
            var processed = worker.DoIt().Result;

            if (processed < toProcess.Count 
                && CancellationContext.Current != null 
                && CancellationContext.Current.IsCancellationRequested)
                    return;
                
            // Новые данные для маппинга
            // Атомы уникальные для Профиль/кампания/группа/объявление
            List<WriteableAtom> newAtoms = new List<WriteableAtom>();
            List<AdEngineCampaign> newCampaigns = new List<AdEngineCampaign>();
            List<BindingRulesUtm> newUtms = new List<BindingRulesUtm>();
            // Компании уникальные для пары профиль/кампания
            HashSet<string> existsCampaigns = new HashSet<string>();
            // Utm уникальна для Source/Medium/Campaign
            HashSet<string> existsUtms = new HashSet<string>();

            // Генерация новых записей в Atom/AdEngineCampaign/BindingRulesUtm
            foreach (var row in toProcess)
            {
                var atom = new WriteableAtom()
                {
                    Id = lastAtomId,
                    Version = baseAtom.Version,
                    Name = "facebook / cpc / " + row.DataRaw.CampaignName,
                    SourceId = baseAtom.SourceId,
                    CampaignId = baseAtom.CampaignId,
                    CityId = baseAtom.CityId,
                    IsEnabled = baseAtom.IsEnabled,
                    IsAutoGenerated = true,
                    StartDate = baseAtom.StartDate,
                    BrandId = 0,
                    RemarketingId = 0,
                    Created = DateTime.Now.Date
                };
                newAtoms.Add(atom);

                string key = $"{row.DataRaw.ProfileId}:{ row.CampaignId}";
                if (!existsCampaigns.Contains(key))
                {
                    newCampaigns.Add(
                        new AdEngineCampaign()
                        {
                            AtomId = atom.Id,
                            Version = 1,
                            AdEngineId = 4,
                            CampaignId = row.CampaignId,
                            ProfileId = row.DataRaw.ProfileId
                        });
                    existsCampaigns.Add(key);
                }

                key = $"{row.Tags.UtmSource}:{row.Tags.UtmMedium}:{row.Tags.UtmCampaign}";
                if (!string.IsNullOrEmpty(row.Tags.UrlTags) && !existsUtms.Contains(key))
                {
                    newUtms.Add(
                        new BindingRulesUtm()
                        {
                            AtomId = atom.Id,
                            Version = 1,
                            Source = row.Tags.UtmSource,
                            Medium = row.Tags.UtmMedium,
                            Campaign = row.Tags.UtmCampaign,
                            HostName = row.Tags.StorySpecs?.LinkData?.Link,
                            StartDate = new DateTime(2000, 01, 01),
                            EndDate = new DateTime(2100, 01,01),
                            Priority = 900,
                            ProfileId = row.DataRaw.ProfileId
                        });
                    existsUtms.Add(key);
                }
                lastAtomId++;
            }

            // Сохранение 
            try
            {
                this.Logger.Log(LogLevel.Message, "Записываю данные в БД");
                CoreHelper.InsertData<WriteableAtom>(newAtoms, false, false, null, null,
                    "[core].[Atoms]", "");
                CoreHelper.InsertData<AdEngineCampaign>(newCampaigns, false, false, null, null,
                    "[core].[AdEngineCampaigns] ", "");
                CoreHelper.InsertData<BindingRulesUtm>(newUtms, false, false, null, null,
                    "[client].[BindingRulesUtm] ", "");
                this.LogFormat(LogLevel.Info, "Успешно.");
            }
            catch (Exception ex)
            {
                throw new EleanorException("Ошибка при записи данных", ex);
            }
        }
