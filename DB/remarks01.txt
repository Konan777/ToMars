Indusoft.LDS.Client.RE

REDocViewControl - главная форма
FormViewControl  - форма документа

C:\!Indus\Branches\Malahit_Techs_2\Source\Indusoft.LDS.Client.FP\Controls\BatchEditControl.cs
^^^ RecreateViewControl - делать по аналогии..

[dbo].[FPOpGroupREDoc_Get]

AEBatchViewControl->Операции
AEBatchRequestOpController
AEBatchRequestOpView


using BLToolkit.EditableObjects;
using Indusoft.LDS.Common.Services;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
namespace Indusoft.LDS.Client.Techs.Controls
{
    public partial class Form1test : Form
    {
        public Form1test()
        {
            InitializeComponent();
            list = new EditableList<Entity> {
                new Entity { MyProperty = 100, entities = new EditableList<Entity>{ new Entity { MyProperty = 150 }, new Entity { MyProperty = 160 }  } },
                new Entity { MyProperty = 200, entities = new EditableList<Entity>{ new Entity { MyProperty = 250 }, new Entity { MyProperty = 260 } } }
                };
            bsource = new BindingSource() { DataSource = list };
            bsourcechild = new BindingSource(bsource, "entities");
            
            
            
            
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON

DECLARE @malahitVersion int;
/* Указать версию БД для которой должен выполняться скрипт*/
SET @malahitVersion = 3;

BEGIN TRANSACTION;
BEGIN TRY

	/* Проверка текущей версии базы данных */
	IF NOT EXISTS (SELECT * FROM [dbo].[SysDatabaseVersion] WHERE [MalahitVersion]=@malahitVersion)
	BEGIN
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
		PRINT ('Данный скрипт не соответствует текущей версии базы данных');
		RETURN;
	END

	/* Скрипты изменения БД - начало */
	--------------------------------------------------------------------------------------------------------
	
	IF object_id('dbo.AEOpDocument_Delete', 'P') is not null drop procedure [dbo].[AEOpDocument_Delete];
	IF object_id('dbo.AEOpDocument_Update', 'P') is not null drop procedure [dbo].[AEOpDocument_Update];
	IF object_id('dbo.AEOpDocument_Insert', 'P') is not null drop procedure [dbo].[AEOpDocument_Insert];
	IF object_id('dbo.AEOpDocument_Log', 'P') is not null drop procedure [dbo].[AEOpDocument_Log];
	IF object_id('dbo.AEOpDocument', 'U') is not null drop table [dbo].[AEOpDocument];

	--------- Таблица'AEOpDocument'------

	CREATE TABLE dbo.AEOpDocument
		(
		AEOpDocumentUid uniqueidentifier NOT NULL,
		AEUid uniqueidentifier NULL,
		OpInfoUid uniqueidentifier NULL,
		AEControlType int NULL,
		REDocPackUid uniqueidentifier NULL,
		REDocUid uniqueidentifier NULL,
		LCID int NULL,
		RV timestamp NULL,
		CONSTRAINT [PK_AEOpDocument] PRIMARY KEY ([AEOpDocumentUid] ASC)
		)  ON [PRIMARY]

	EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Документы операции' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AEOpDocument', @level2type=NULL, @level2name=NULL;
	EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ИД документа операции' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AEOpDocument', @level2type=N'COLUMN',@level2name=N'AEOpDocumentUid';
	EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ИД объекта учета' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AEOpDocument', @level2type=N'COLUMN',@level2name=N'AEUid';
	EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ИД информации об операции' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AEOpDocument', @level2type=N'COLUMN',@level2name=N'OpInfoUid';
	EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Тип контроля' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AEOpDocument', @level2type=N'COLUMN',@level2name=N'AEControlType';
	EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ИД пакета документов' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AEOpDocument', @level2type=N'COLUMN',@level2name=N'REDocPackUid';
	EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ИД документа операции' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AEOpDocument', @level2type=N'COLUMN',@level2name=N'REDocUid';
	EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Локализация' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AEOpDocument', @level2type=N'COLUMN',@level2name=N'LCID';
	
	ALTER TABLE [dbo].[AEOpDocument] WITH CHECK ADD CONSTRAINT [FK_AEOpDocument_AEOp] FOREIGN KEY([AEUid],[OpInfoUid]) REFERENCES [dbo].[AEOp] ([AEUid], [OpInfoUid]);
	ALTER TABLE [dbo].[AEOpDocument] CHECK CONSTRAINT [FK_AEOpDocument_AEOp];
	ALTER TABLE [dbo].[AEOpDocument] WITH CHECK ADD CONSTRAINT [FK_AEOpDocument_REDocPack] FOREIGN KEY([REDocPackUid]) REFERENCES [dbo].[REDocPack] ([REDocPackUid]);
	ALTER TABLE [dbo].[AEOpDocument] CHECK CONSTRAINT [FK_AEOpDocument_REDocPack];
	ALTER TABLE [dbo].[AEOpDocument] WITH CHECK ADD CONSTRAINT [FK_AEOpDocument_REDoc] FOREIGN KEY([ReDocUid]) REFERENCES [dbo].[REDoc] ([REDocUid]);
	ALTER TABLE [dbo].[AEOpDocument] CHECK CONSTRAINT [FK_AEOpDocument_REDoc];
	 
	-------------- Indexes forAEOpDocument--------------------------------------------


	--------- Хранимые процедуры для 'AEOpDocument'------

	EXEC dbo.sp_executesql @statement = N'	
	CREATE PROCEDURE [dbo].[AEOpDocument_Log]
		@EventType nvarchar(2),
	
		@oldAEOpDocumentUid uniqueidentifier,
		@oldAEUid uniqueidentifier,
		@oldOpInfoUid uniqueidentifier,
		@oldAEControlType int,
		@oldREDocPackUid uniqueidentifier,
		@oldREDocUid uniqueidentifier,
		@oldLCID int,

		@newAEOpDocumentUid uniqueidentifier,
		@newAEUid uniqueidentifier,
		@newOpInfoUid uniqueidentifier,
		@newAEControlType int,
		@newREDocPackUid uniqueidentifier,
		@newREDocUid uniqueidentifier,
		@newLCID int
	AS
	BEGIN	
		DECLARE @sysEventLogId int;
		EXEC [dbo].[spc_sys_LogEvent] N''AEOpDocument'', @EventType, @sysEventLogId OUTPUT;
		EXEC [dbo].[spc_sys_LogEventData] @sysEventLogId, N''AEOpDocumentUid'', @oldAEOpDocumentUid, @newAEOpDocumentUid, 1;
		EXEC [dbo].[spc_sys_LogEventData] @sysEventLogId, N''AEUid'', @oldAEUid, @newAEUid;
		EXEC [dbo].[spc_sys_LogEventData] @sysEventLogId, N''OpInfoUid'', @oldOpInfoUid, @newOpInfoUid;
		EXEC [dbo].[spc_sys_LogEventData] @sysEventLogId, N''AEControlType'', @oldAEControlType, @newAEControlType;
		EXEC [dbo].[spc_sys_LogEventData] @sysEventLogId, N''REDocPackUid'', @oldREDocPackUid, @newREDocPackUid;
		EXEC [dbo].[spc_sys_LogEventData] @sysEventLogId, N''REDocUid'', @oldREDocUid, @newREDocUid;
		EXEC [dbo].[spc_sys_LogEventData] @sysEventLogId, N''LCID'', @oldLCID, @newLCID;
	END;';

	EXEC dbo.sp_executesql @statement = N'	
	CREATE PROCEDURE [dbo].[AEOpDocument_Insert]
		-- Системные параметры
		@RaiseError bit = 1,
       	
		-- Данные
		@AEOpDocumentUid UNIQUEIDENTIFIER,
		@AEUid UNIQUEIDENTIFIER,
		@OpInfoUid UNIQUEIDENTIFIER,
		@AEControlType INT,
		@REDocPackUid UNIQUEIDENTIFIER,
		@REDocUid UNIQUEIDENTIFIER,
		@LCID INT,
		@RV TIMESTAMP OUTPUT
	AS     	
	BEGIN	
		SET NOCOUNT ON;
       	
		BEGIN TRY

			-- Вставка данных в [AEOpDocument]
			INSERT INTO [AEOpDocument] (
				[AEOpDocumentUid],
				[AEUid],
				[OpInfoUid],
				[AEControlType],
				[REDocPackUid],
				[REDocUid],
				[LCID]
			) VALUES (
				@AEOpDocumentUid,
				@AEUid,
				@OpInfoUid,
				@AEControlType,
				@REDocPackUid,
				@REDocUid,
				@LCID);
	
			-- Проверка числа обработанных записей
			EXEC [dbo].[sp_RowCountCheck] N''AEOpDocument'', @@ROWCOUNT, @RaiseError;
			-- Возвращаемая RowVersion
			SELECT @RV = [RV] FROM [AEOpDocument]  WHERE [AEOpDocumentUid] = @AEOpDocumentUid;
       	
			-- Запись события в лог
			EXEC [dbo].[AEOpDocument_Log]
				N''I'',
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				@AEOpDocumentUid,
				@AEUid,
				@OpInfoUid,
				@AEControlType,
				@REDocPackUid,
				@REDocUid,
				@LCID;
		END TRY
		BEGIN CATCH
			-- Ошибка
			EXEC [dbo].[sp_InsertRowError] N''AEOpDocument'', @RaiseError;
		END CATCH;
	END;';

	EXEC dbo.sp_executesql @statement = N'	
	CREATE PROCEDURE [dbo].[AEOpDocument_Update]
		-- Системные параметры
		@RaiseError bit = 1,
		
		-- Старые данные
		@oldAEOpDocumentUid UNIQUEIDENTIFIER,
		@oldRV TIMESTAMP,

		-- Новые данные
		@newAEOpDocumentUid UNIQUEIDENTIFIER,
		@newAEUid UNIQUEIDENTIFIER,
		@newOpInfoUid UNIQUEIDENTIFIER,
		@newAEControlType INT,
		@newREDocPackUid UNIQUEIDENTIFIER,
		@newREDocUid UNIQUEIDENTIFIER,
		@newLCID INT,
		@newRV TIMESTAMP OUTPUT
 
	AS
	BEGIN	
		SET NOCOUNT ON;
       	
		BEGIN TRY 	
			-- Данные для логирования
			DECLARE 
			@oldAEUid UNIQUEIDENTIFIER,
			@oldOpInfoUid UNIQUEIDENTIFIER,
			@oldAEControlType INT,
			@oldREDocPackUid UNIQUEIDENTIFIER,
			@oldREDocUid UNIQUEIDENTIFIER,
			@oldLCID INT
		
			SELECT 
				@oldAEUid = [AEUid],
				@oldOpInfoUid = [OpInfoUid],
				@oldAEControlType = [AEControlType],
				@oldREDocPackUid = [REDocPackUid],
				@oldREDocUid = [REDocUid],
				@oldLCID = [LCID]
			FROM [AEOpDocument] 
			WHERE [AEOpDocumentUid] = @oldAEOpDocumentUid
				AND [RV] = @oldRV;
       	
			-- Изменение данных в [AEOpDocument]
			UPDATE [AEOpDocument]
			SET [AEOpDocumentUid] = @newAEOpDocumentUid,
				[AEUid] = @newAEUid,
				[OpInfoUid] = @newOpInfoUid,
				[AEControlType] = @newAEControlType,
				[REDocPackUid] = @newREDocPackUid,
				[REDocUid] = @newREDocUid,
				[LCID] = @newLCID
			WHERE [AEOpDocumentUid] = @oldAEOpDocumentUid
				AND [RV] = @oldRV;
       		
			-- Проверка числа обработанных записей
			EXEC [dbo].[sp_RowCountCheck] N''AEOpDocument'', @@ROWCOUNT, @RaiseError;
			-- Возвращаемая RowVersion
			SELECT @newRV = [RV] FROM [AEOpDocument] WHERE [AEOpDocumentUid] = @oldAEOpDocumentUid;
			-- Запись события в лог
			EXEC [dbo].[AEOpDocument_Log]
				N''U'',
				@oldAEOpDocumentUid,
				@oldAEUid,
				@oldOpInfoUid,
				@oldAEControlType,
				@oldREDocPackUid,
				@oldREDocUid,
				@oldLCID,
				@newAEOpDocumentUid,
				@newAEUid,
				@newOpInfoUid,
				@newAEControlType,
				@newREDocPackUid,
				@newREDocUid,
				@newLCID;
       	
		END TRY
		BEGIN CATCH
			-- Ошибка
			EXEC [dbo].[sp_UpdateRowError] N''AEOpDocument'', @RaiseError;
		END CATCH;
	END;';

	EXEC dbo.sp_executesql @statement = N'	
	CREATE PROCEDURE [dbo].[AEOpDocument_Delete]
		-- Системные параметры
		@RaiseError bit = 1,
       	
		-- Данные
		@AEOpDocumentUid UNIQUEIDENTIFIER,
		@RV TIMESTAMP
	AS
	BEGIN	
		SET NOCOUNT ON;
       	
		BEGIN TRY
			-- Данные для логирования
			DECLARE 
			@AEUid UNIQUEIDENTIFIER,
			@OpInfoUid UNIQUEIDENTIFIER,
			@AEControlType INT,
			@REDocPackUid UNIQUEIDENTIFIER,
			@REDocUid UNIQUEIDENTIFIER,
			@LCID INT
		
			SELECT
				@AEUid = [AEUid],
				@OpInfoUid = [OpInfoUid],
				@AEControlType = [AEControlType],
				@REDocPackUid = [REDocPackUid],
				@REDocUid = [REDocUid],
				@LCID = [LCID]
			FROM [AEOpDocument] 
			WHERE [AEOpDocumentUid] = @AEOpDocumentUid
				AND [RV] = @RV;
			
			-- Удаление данных из [AEOpDocument]
			
			DELETE FROM [AEOpDocument]
			WHERE [AEOpDocumentUid] = @AEOpDocumentUid
				AND [RV] = @RV;
       	
			-- Проверка числа обработанных записей
			EXEC [dbo].[sp_RowCountCheck] N''AEOpDocument'', @@ROWCOUNT, @RaiseError;
       		        -- Запись события в лог
			EXEC [dbo].[AEOpDocument_Log]
				N''D'',
				@AEOpDocumentUid,
				@AEUid,
				@OpInfoUid,
				@AEControlType,
				@REDocPackUid,
				@REDocUid,
				@LCID,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL;
		END TRY
		BEGIN CATCH
			-- Ошибка
			EXEC [dbo].[sp_DeleteRowError] N''AEOpDocument'', @RaiseError;
		END CATCH;
	END;';

	--------------------------------------------------------------------------------------------------------
	/* Скрипты изменения БД - конец */

	/* Указываем версию новой базы данных */
	UPDATE [dbo].[SysDatabaseVersion]
		SET [MalahitVersion] = (@malahitVersion + 1)
	WHERE [MalahitVersion]=@malahitVersion;

END TRY
BEGIN CATCH
    SELECT 
        ERROR_NUMBER() AS ErrorNumber,
        ERROR_SEVERITY() AS ErrorSeverity,
        ERROR_STATE() as ErrorState,
        ERROR_PROCEDURE() as ErrorProcedure,
        ERROR_LINE() as ErrorLine,
        ERROR_MESSAGE() as ErrorMessage;

    IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION;
END CATCH;

IF @@TRANCOUNT > 0
    COMMIT TRANSACTION;

SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON

DECLARE @malahitVersion int;
/* Указать версию БД для которой должен выполняться скрипт*/
SET @malahitVersion = 4;

BEGIN TRANSACTION;
BEGIN TRY

	/* Проверка текущей версии базы данных */
	IF NOT EXISTS (SELECT * FROM [dbo].[SysDatabaseVersion] WHERE [MalahitVersion]=@malahitVersion)
	BEGIN
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
		PRINT ('Данный скрипт не соответствует текущей версии базы данных');
		RETURN;
	END

	/* Скрипты изменения БД - начало */
	--------------------------------------------------------------------------------------------------------
	
	IF object_id('dbo.AEOpSign_Delete', 'P') is not null drop procedure [dbo].[AEOpSign_Delete];
	IF object_id('dbo.AEOpSign_Update', 'P') is not null drop procedure [dbo].[AEOpSign_Update];
	IF object_id('dbo.AEOpSign_Insert', 'P') is not null drop procedure [dbo].[AEOpSign_Insert];
	IF object_id('dbo.AEOpSign_Log', 'P') is not null drop procedure [dbo].[AEOpSign_Log];
	IF object_id('dbo.AEOpSign', 'U') is not null drop table [dbo].[AEOpSign];

	--------- Таблица'AEOpSign'------

	CREATE TABLE dbo.AEOpSign
		(
		AEOpSignUid uniqueidentifier NOT NULL,
		AEUid uniqueidentifier NULL,
		OpInfoUid uniqueidentifier NULL,
		StampUid uniqueidentifier NULL,
		SignUid uniqueidentifier NULL,
		RV timestamp NULL,
		CONSTRAINT [PK_AEOpSign] PRIMARY KEY ([AEOpSignUid] ASC)
		)  ON [PRIMARY]

	EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Подпись операции' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AEOpSign', @level2type=NULL, @level2name=NULL;
	EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ИД подписи операции' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AEOpSign', @level2type=N'COLUMN',@level2name=N'AEOpSignUid';
	EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ИД объекта учета' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AEOpSign', @level2type=N'COLUMN',@level2name=N'AEUid';
	EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ИД информации об операции' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AEOpSign', @level2type=N'COLUMN',@level2name=N'OpInfoUid';
	EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ИД печати/штампа' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AEOpSign', @level2type=N'COLUMN',@level2name=N'StampUid';
	EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ИД состава операции' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AEOpSign', @level2type=N'COLUMN',@level2name=N'SignUid';
	
	ALTER TABLE [dbo].[AEOpSign] WITH CHECK ADD CONSTRAINT [FK_AEOpSign_AEOp] FOREIGN KEY([AEUid], [OpInfoUid]) REFERENCES [dbo].[AEOp] ([AEUid], [OpInfoUid]);
	ALTER TABLE [dbo].[AEOpSign] CHECK CONSTRAINT [FK_AEOpSign_AEOp];
	ALTER TABLE [dbo].[AEOpSign] WITH CHECK ADD CONSTRAINT [FK_AEOpSign_Sign] FOREIGN KEY([SignUid]) REFERENCES [dbo].[Sign] ([SignUid]);
	ALTER TABLE [dbo].[AEOpSign] CHECK CONSTRAINT [FK_AEOpSign_Sign];
	ALTER TABLE [dbo].[AEOpSign] WITH CHECK ADD CONSTRAINT [FK_AEOpSign_Stamp] FOREIGN KEY([StampUid]) REFERENCES [dbo].[Stamp] ([StampUid]);
	ALTER TABLE [dbo].[AEOpSign] CHECK CONSTRAINT [FK_AEOpSign_Stamp];
	 
	-------------- Indexes forAEOpSign--------------------------------------------


	--------- Хранимые процедуры для 'AEOpSign'------

	EXEC dbo.sp_executesql @statement = N'	
	CREATE PROCEDURE [dbo].[AEOpSign_Log]
		@EventType nvarchar(2),
	
		@oldAEOpSignUid uniqueidentifier,
		@oldAEUid uniqueidentifier,
		@oldOpInfoUid uniqueidentifier,
		@oldStampUid uniqueidentifier,
		@oldSignUid uniqueidentifier,

		@newAEOpSignUid uniqueidentifier,
		@newAEUid uniqueidentifier,
		@newOpInfoUid uniqueidentifier,
		@newStampUid uniqueidentifier,
		@newSignUid uniqueidentifier
	AS
	BEGIN	
		DECLARE @sysEventLogId int;
		EXEC [dbo].[spc_sys_LogEvent] N''AEOpSign'', @EventType, @sysEventLogId OUTPUT;
		EXEC [dbo].[spc_sys_LogEventData] @sysEventLogId, N''AEOpSignUid'', @oldAEOpSignUid, @newAEOpSignUid, 1;
		EXEC [dbo].[spc_sys_LogEventData] @sysEventLogId, N''AEUid'', @oldAEUid, @newAEUid;
		EXEC [dbo].[spc_sys_LogEventData] @sysEventLogId, N''OpInfoUid'', @oldOpInfoUid, @newOpInfoUid;
		EXEC [dbo].[spc_sys_LogEventData] @sysEventLogId, N''StampUid'', @oldStampUid, @newStampUid;
		EXEC [dbo].[spc_sys_LogEventData] @sysEventLogId, N''SignUid'', @oldSignUid, @newSignUid;
	END;';

	EXEC dbo.sp_executesql @statement = N'	
	CREATE PROCEDURE [dbo].[AEOpSign_Insert]
		-- Системные параметры
		@RaiseError bit = 1,
       	
		-- Данные
		@AEOpSignUid UNIQUEIDENTIFIER,
		@AEUid UNIQUEIDENTIFIER,
		@OpInfoUid UNIQUEIDENTIFIER,
		@StampUid UNIQUEIDENTIFIER,
		@SignUid UNIQUEIDENTIFIER,
		@RV TIMESTAMP OUTPUT
	AS     	
	BEGIN	
		SET NOCOUNT ON;
       	
		BEGIN TRY

			-- Вставка данных в [AEOpSign]
			INSERT INTO [AEOpSign] (
				[AEOpSignUid],
				[AEUid],
				[OpInfoUid],
				[StampUid],
				[SignUid]
			) VALUES (
				@AEOpSignUid,
				@AEUid,
				@OpInfoUid,
				@StampUid,
				@SignUid);
	
			-- Проверка числа обработанных записей
			EXEC [dbo].[sp_RowCountCheck] N''AEOpSign'', @@ROWCOUNT, @RaiseError;
			-- Возвращаемая RowVersion
			SELECT @RV = [RV] FROM [AEOpSign]  WHERE [AEOpSignUid] = @AEOpSignUid;
       	
			-- Запись события в лог
			EXEC [dbo].[AEOpSign_Log]
				N''I'',
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				@AEOpSignUid,
				@AEUid,
				@OpInfoUid,
				@StampUid,
				@SignUid;
		END TRY
		BEGIN CATCH
			-- Ошибка
			EXEC [dbo].[sp_InsertRowError] N''AEOpSign'', @RaiseError;
		END CATCH;
	END;';

	EXEC dbo.sp_executesql @statement = N'	
	CREATE PROCEDURE [dbo].[AEOpSign_Update]
		-- Системные параметры
		@RaiseError bit = 1,
		
		-- Старые данные
		@oldAEOpSignUid UNIQUEIDENTIFIER,
		@oldRV TIMESTAMP,

		-- Новые данные
		@newAEOpSignUid UNIQUEIDENTIFIER,
		@newAEUid UNIQUEIDENTIFIER,
		@newOpInfoUid UNIQUEIDENTIFIER,
		@newStampUid UNIQUEIDENTIFIER,
		@newSignUid UNIQUEIDENTIFIER,
		@newRV TIMESTAMP OUTPUT
	AS
	BEGIN	
		SET NOCOUNT ON;
       	
		BEGIN TRY 	
			-- Данные для логирования
			DECLARE 
			@oldAEUid UNIQUEIDENTIFIER,
			@oldOpInfoUid UNIQUEIDENTIFIER,
			@oldStampUid UNIQUEIDENTIFIER,
			@oldSignUid UNIQUEIDENTIFIER
		
			SELECT 
				@oldAEUid = [AEUid],
				@oldOpInfoUid = [OpInfoUid],
				@oldStampUid = [StampUid],
				@oldSignUid = [SignUid]
			FROM [AEOpSign] 
			WHERE [AEOpSignUid] = @oldAEOpSignUid
				AND [RV] = @oldRV;
       	
			-- Изменение данных в [AEOpSign]
			UPDATE [AEOpSign]
			SET [AEOpSignUid] = @newAEOpSignUid,
				[AEUid] = @newAEUid,
				[OpInfoUid] = @newOpInfoUid,
				[StampUid] = @newStampUid,
				[SignUid] = @newSignUid
			WHERE [AEOpSignUid] = @oldAEOpSignUid
				AND [RV] = @oldRV;
       		
			-- Проверка числа обработанных записей
			EXEC [dbo].[sp_RowCountCheck] N''AEOpSign'', @@ROWCOUNT, @RaiseError;
			-- Возвращаемая RowVersion
			SELECT @newRV = [RV] FROM [AEOpSign] WHERE [AEOpSignUid] = @oldAEOpSignUid;
			-- Запись события в лог
			EXEC [dbo].[AEOpSign_Log]
				N''U'',
				@oldAEOpSignUid,
				@oldAEUid,
				@oldOpInfoUid,
				@oldStampUid,
				@oldSignUid,
				@newAEOpSignUid,
				@newAEUid,
				@newOpInfoUid,
				@newStampUid,
				@newSignUid;
       	
		END TRY
		BEGIN CATCH
			-- Ошибка
			EXEC [dbo].[sp_UpdateRowError] N''AEOpSign'', @RaiseError;
		END CATCH;
	END;';

	EXEC dbo.sp_executesql @statement = N'	
	CREATE PROCEDURE [dbo].[AEOpSign_Delete]
		-- Системные параметры
		@RaiseError bit = 1,
       	
		-- Данные
		@AEOpSignUid UNIQUEIDENTIFIER,
		@RV TIMESTAMP
	AS
	BEGIN	
		SET NOCOUNT ON;
       	
		BEGIN TRY
			-- Данные для логирования
			DECLARE 
			@AEUid UNIQUEIDENTIFIER,
			@OpInfoUid UNIQUEIDENTIFIER,
			@StampUid UNIQUEIDENTIFIER,
			@SignUid UNIQUEIDENTIFIER
		
			SELECT
				@AEUid = [AEUid],
				@OpInfoUid = [OpInfoUid],
				@StampUid = [StampUid],
				@SignUid = [SignUid]
			FROM [AEOpSign] 
			WHERE [AEOpSignUid] = @AEOpSignUid
				AND [RV] = @RV;
			
			-- Удаление данных из [AEOpSign]
			
			DELETE FROM [AEOpSign]
			WHERE [AEOpSignUid] = @AEOpSignUid
				AND [RV] = @RV;
       	
			-- Проверка числа обработанных записей
			EXEC [dbo].[sp_RowCountCheck] N''AEOpSign'', @@ROWCOUNT, @RaiseError;
       		        -- Запись события в лог
			EXEC [dbo].[AEOpSign_Log]
				N''D'',
				@AEOpSignUid,
				@AEUid,
				@OpInfoUid,
				@StampUid,
				@SignUid,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL;
		END TRY
		BEGIN CATCH
			-- Ошибка
			EXEC [dbo].[sp_DeleteRowError] N''AEOpSign'', @RaiseError;
		END CATCH;
	END;';

	--------------------------------------------------------------------------------------------------------
	/* Скрипты изменения БД - конец */

	/* Указываем версию новой базы данных */
	UPDATE [dbo].[SysDatabaseVersion]
		SET [MalahitVersion] = (@malahitVersion + 1)
	WHERE [MalahitVersion]=@malahitVersion;

END TRY
BEGIN CATCH
    SELECT 
        ERROR_NUMBER() AS ErrorNumber,
        ERROR_SEVERITY() AS ErrorSeverity,
        ERROR_STATE() as ErrorState,
        ERROR_PROCEDURE() as ErrorProcedure,
        ERROR_LINE() as ErrorLine,
        ERROR_MESSAGE() as ErrorMessage;

    IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION;
END CATCH;

IF @@TRANCOUNT > 0
    COMMIT TRANSACTION;

            gridControl1.DataSource = bsource;
            gridControl2.DataSource = bsourcechild;
        }
        private void button1_Click(object sender, EventArgs e)
        {
            var current = bsource.Current as Entity;
            current.MyProperty++;           
        }
        BindingSource bsourcechild;
        BindingSource bsource;
        BindingList<Entity> _binding;
        EditableList<Entity> list;
    }
    public class Entity : EditableDataEntity<Entity>
    {
        private int _MyProperty;
        public int MyProperty
        {
            get => _MyProperty;
            set
            {
                
                this.OnPropertyChanged("MyProperty",_MyProperty,value );
                _MyProperty = value;
            }
        }
        public EditableList<Entity> entities { get; set; }
    }
}


namespace Indusoft.LDS.Client.Techs.Controls
{
    partial class Form1test
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;
        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }
        #region Windows Form Designer generated code
        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.gridControl1 = new DevExpress.XtraGrid.GridControl();
            this.gridView1 = new DevExpress.XtraGrid.Views.Grid.GridView();
            this.button1 = new System.Windows.Forms.Button();
            this.gridControl2 = new DevExpress.XtraGrid.GridControl();
            this.gridView2 = new DevExpress.XtraGrid.Views.Grid.GridView();
            ((System.ComponentModel.ISupportInitialize)(this.gridControl1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.gridView1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.gridControl2)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.gridView2)).BeginInit();
            this.SuspendLayout();
            // 
            // gridControl1
            // 
            this.gridControl1.Location = new System.Drawing.Point(13, 13);
            this.gridControl1.MainView = this.gridView1;
            this.gridControl1.Name = "gridControl1";
            this.gridControl1.Size = new System.Drawing.Size(602, 193);
            this.gridControl1.TabIndex = 0;
            this.gridControl1.ViewCollection.AddRange(new DevExpress.XtraGrid.Views.Base.BaseView[] {
            this.gridView1});
            // 
            // gridView1
            // 
            this.gridView1.GridControl = this.gridControl1;
            this.gridView1.Name = "gridView1";
            // 
            // button1
            // 
            this.button1.Location = new System.Drawing.Point(674, 392);
            this.button1.Name = "button1";
            this.button1.Size = new System.Drawing.Size(75, 23);
            this.button1.TabIndex = 1;
            this.button1.Text = "button1";
            this.button1.UseVisualStyleBackColor = true;
            this.button1.Click += new System.EventHandler(this.button1_Click);
            // 
            // gridControl2
            // 
            this.gridControl2.Location = new System.Drawing.Point(158, 213);
            this.gridControl2.MainView = this.gridView2;
            this.gridControl2.Name = "gridControl2";
            this.gridControl2.Size = new System.Drawing.Size(510, 200);
            this.gridControl2.TabIndex = 2;
            this.gridControl2.ViewCollection.AddRange(new DevExpress.XtraGrid.Views.Base.BaseView[] {
            this.gridView2});
            // 
            // gridView2
            // 
            this.gridView2.GridControl = this.gridControl2;
            this.gridView2.Name = "gridView2";
            // 
            // Form1test
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(800, 450);
            this.Controls.Add(this.gridControl2);
            this.Controls.Add(this.button1);
            this.Controls.Add(this.gridControl1);
            this.Name = "Form1test";
            this.Text = "Form1test";
            ((System.ComponentModel.ISupportInitialize)(this.gridControl1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.gridView1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.gridControl2)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.gridView2)).EndInit();
            this.ResumeLayout(false);
        }
        #endregion
        private DevExpress.XtraGrid.GridControl gridControl1;
        private DevExpress.XtraGrid.Views.Grid.GridView gridView1;
        private System.Windows.Forms.Button button1;
        private DevExpress.XtraGrid.GridControl gridControl2;
        private DevExpress.XtraGrid.Views.Grid.GridView gridView2;
    }
}


<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.
    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>



        private void barButtonItem3_ItemClick(object sender, ItemClickEventArgs e)
        {
            Form1test frm = new Form1test();
            frm.ShowDialog();
        }

