Indusoft.LDS.Client.RE

REDocViewControl - главная форма
FormViewControl  - форма документа
_bbiRefreshDocs_ItemClick
-------------------------
1) если в списке есть утвержденные документы выводим сообщение
	Поиск статуса документа: REDocReportLog->REDocReportLogDoc->Status
InitDocs();
	_viewCtl.Init, _viewCtl.InitDocTypeRights
LoadDocsData();
	_viewCtl.LoadData(GetFilterString(batch.FPBatchUid));
FilterDocs();
Возможно _viewCtl.RefreshReports();	
_viewCtl.ShowDocs();
RefreshREExtensions()
	_viewCtl.RefreshExtensions();

_viewCtl_DocsSaving
-------------------
RefreshREExtensions
может быть _viewCtl.RefreshReports();

viewCtl_BeforePrint
-------------------



        #region Documents

        private void LoadDocsData()
        {
            if (_viewCtl != null)
                _viewCtl.LoadData(GetFilterString());
        }
        public void RefreshDocView()
        {
            if (_viewCtl != null)
                _viewCtl.RefreshControl();
        }
        private void RefreshREExtensions()
        {
            if (_viewCtl?.ExtensionsState == ExtensionsState.NeedRefresh)
                _viewCtl.RefreshExtensions();
        }
        private void InitDocs()
        {
            if (_viewCtl != null)
            {
                _viewCtl.Init(DateTime.Now);
                //_viewCtl.InitDocTypeRights(GetDocTypeCurrentUserRights());
            }
        }
        private string GetFilterString()
        {
            // TODO: нужно засосать из REDocReport только документы с определенными GUID
            return string.Format("Select [REDocReportUid] from [dbo].[REDocReport] where REDocUid in ({0})", _reDocUids);
        }
        private string _reDocUids;



        private IREDocViewControl _viewCtl = null;
        private void ShowDocuments()
        {
            var docTypeUid = (AEDataSource.Instance as IREDataSource).DSUid;

            if (_viewCtl==null)
                _viewCtl = _dm.DocViewer.GetControl(docTypeUid);

            _viewCtl.ViewControl.Dock = DockStyle.Fill;
            _viewCtl.BeforeLoad += viewCtl_BeforeLoad;
            _viewCtl.RefreshClick += _bbiRefreshDocs_ItemClick;
            _viewCtl.BeginPrint += viewCtl_BeginPrint;


            _viewCtl.Configure(new BatchAEDocBehviour());
            _viewCtl.AllowPrint = true;
            _viewCtl.AllowPrintNoD = true;
           
            _viewCtl.Init(DateTime.Now);

            // Засасываем документы. 
            _viewCtl.LoadData(GetFilterString());

            AEDataSource.Instance.LoadData(_view.SelectedOp.AEBatchOpUid);

            using (var docView = new AEBatchDocsView())
            {
                docView._spContainer.Panel1.Controls.Add(_viewCtl.ViewControl);
                docView.ShowDialog();
                // Удалим ViewControl с формы т.к. иначе для всех дочерних контролы формы будут вызваны деструкторы
                // и будет падать в REDocViewControl->InitExtControls при попытке добавиь disposed контрол page.Controls.Add(ctl);
                docView._spContainer.Panel1.Controls.Remove(_viewCtl.ViewControl);
            }
        }

        void viewCtl_BeforeLoad(object sender, DocumentBeforeLoadEventArgs e)
        {
            _reDocUids = "";
            foreach (var guid in _dm.GetAEBatchOpDocs(_view.SelectedOp.AEBatchOpUid))
            {
                e.AddDocUid(guid);
                _reDocUids = string.IsNullOrEmpty(_reDocUids) ? "'"+guid.ToString()+"'" : _reDocUids + ", '" + guid.ToString()+"'";
            }
        }
        private void _bbiRefreshDocs_ItemClick(object sender, EventArgs e)
        {
            if (_viewCtl != null)
            {
                InitDocs();
                var query = GetFilterString();
                var allDocuments = _dm.REDataService.GetReportsByExtension(query, true);
                if (IsAEBatchOPHaveConfimedDocuments(allDocuments))
                {
                    MsgBox.ShowWarning("Невозможно обновить документы т.к. в списке уже есть утвержденные докуементы!");
                    return;
                }

                if (allDocuments.Count()==0)
                    _viewCtl.Save();

                CreateReportLogDoc(allDocuments);
                LoadDocsData();
                _viewCtl.ShowDocs();
                RefreshREExtensions();
            }
        }

        private bool IsAEBatchOPHaveConfimedDocuments(REDocReport[] allDocuments)
        {
            foreach (var document in allDocuments)
            {
                var logdocs = _dm.REDataService.GetREDocReportLogDoc(document.REDocReportUid);
                if (logdocs.Any(a => a.State == (int)DocumentLogState.Confirmed))
                {
                    return true;
                }
            }
            return false;
        }

        private void CreateReportLogDoc(REDocReport[] allDocuments)
        {


            var userName = _dm.User.Name;

            foreach (var document in allDocuments)
            {
                var form = document.Forms
                    .FirstOrDefault(f => !f.LCID.HasValue || f.LCID.Value == Thread.CurrentThread.CurrentUICulture.LCID);

                if (form == null)
                    return;

                var logDocument = new REDocReportLogDoc
                {
                    REDocReportLogUid = Guid.NewGuid(),
                    REDocReportUid = document.REDocReportUid,
                    REDocReportFormUid = form.REDocReportFormUid,

                    UserName = userName,
                    State = (int)DocumentLogState.Temporary,
                    LogDate = DateTime.Now
                };
                _dm.REDataService.REDocReportLogDoc_Insert(logDocument);
            }
        }


        private List<SendDocDescriptor> _sendDescs = new List<SendDocDescriptor>();
        private List<ArchiveDocumentDescriptor> _archiveDs = new List<ArchiveDocumentDescriptor>();
        private Dictionary<PrintFormDescriptor, List<SendDocDescriptor>> _sendDescsSuspended = new Dictionary<PrintFormDescriptor, List<SendDocDescriptor>>();
        private Dictionary<PrintFormDescriptor, List<ArchiveDocumentDescriptor>> _archiveDsSuspended = new Dictionary<PrintFormDescriptor, List<ArchiveDocumentDescriptor>>();

        void viewCtl_BeginPrint(object sender, EventArgs e)
        {
            _sendDescs.Clear();
            _archiveDs.Clear();
            _sendDescsSuspended.Clear();
            _archiveDsSuspended.Clear();

        }
        #region REDocBehaviour

        internal class BatchAEDocBehviour : IREDocViewBehaviour
        {
            #region Implementation of IREDocViewBehaviour

            public RefreshExtensionsMode RefreshExtensionsMode { get; } = RefreshExtensionsMode.Notify;

            #endregion
        }
        internal class AEDocSettings : IREDocSettings
        {


            public Guid REDocUid
            {
                get;
                set;
            }

            public REDuplexStyle DuplexStyle
            {
                get;
                set;
            }

            public REAlternationMode AlternationMode
            {
                get;
                set;
            }
        }


        #endregion

        #endregion
