- в интерфейс:
  позиция курсора в формуле
  события от контролов
- начать делать контроллер
  заполнение данных для DataSource
- уточнить что идет комбо грида проверки


public interface IDimsView
    {
        EditableList<OutRow> _DSOut { get; }
        EditableList<DimsRow> _DSOutCB { get; }
        EditableList<CheckRow> _DSCheckCB { get; }
        EditableList<InRow> _DSInDims { get; }
        EditableList<InRow> _DSInProps { get; }

        OutRow SelectedOutRow { get; }
        CheckRow SelectedCheckRow { get; }
        InRow SelectedDim { get; }
        InRow SelectedProp { get; }
        string Formula { get; set; }
        event EventHandler AddClicked;
        event EventHandler DeleteClicked;
        event EventHandler CheckClicker;
        event EventHandler _leOutChanged;
        event EventHandler _leCheckChanged;
        event EventHandler _glePropChanged;
        event EventHandler _gleDimsChanged;
    }
    
      
      
using System;
using System.Linq;
using System.Windows.Forms;
using BLToolkit.EditableObjects;
using DevExpress.XtraEditors.Repository;

namespace _AEMeta
{
    public partial class DimsView : UserControl, IDimsView
    {
        public DimsView()
        {
            InitializeComponent();

            // Bind events
            _sbAdd.Click += _sbAdd_Click;
            _sbDelete.Click += _sbDelete_Click;
            _sbCheck.Click += _sbCheck_Click;
            _gleDims.EditValueChanged += _gleDims_EditValueChanged;
            _gleProp.EditValueChanged += _gleProp_EditValueChanged;
            _leOut.EditValueChanged += _leOut_EditValueChanged;
            _leCheck.EditValueChanged += _leCheck_EditValueChanged;

            // DataSources

            FillDataSources();


            // Инициализация грида формул
            _gcOut.DataSource = DSOut;
            _gcOutView.Columns.Clear();
            _gcOutView.OptionsView.ShowGroupPanel = false;

            _leOut.DataSource = DSOutCB;
            _leOut.DisplayMember = "Name";
            _leOut.ValueMember = "DimsItem";
            _leOut.Columns.Add(new DevExpress.XtraEditors.Controls.LookUpColumnInfo("Name"));
            _leOut.TextEditStyle = DevExpress.XtraEditors.Controls.TextEditStyles.DisableTextEditor;
            _leOut.ShowHeader = false;
            _leOut.Buttons.Clear();
            _leOut.NullText = String.Empty;

            var nc = _gcOutView.Columns.AddVisible("Name", "Наименование");
            nc = _gcOutView.Columns.AddVisible("DimsItem", "Результат");
            nc.ColumnEdit = _leOut;

            // Инициализация грида проверки
            _gcCheck.DataSource = DSCheck;
            _gcCheckView.Columns.Clear();
            _gcCheckView.OptionsView.ShowGroupPanel = false;

            _leCheck.DataSource = DSCheckCB;
            _leCheck.DisplayMember = "Name";
            _leCheck.ValueMember = "DimsItem";
            _leCheck.Columns.Add(new DevExpress.XtraEditors.Controls.LookUpColumnInfo("Name"));
            _leCheck.TextEditStyle = DevExpress.XtraEditors.Controls.TextEditStyles.DisableTextEditor;
            _leCheck.ShowHeader = false;
            _leCheck.Buttons.Clear();
            _leCheck.NullText = String.Empty;

            var ngc = _gcCheckView.Columns.AddVisible("Name", "Величина");
            ngc.OptionsColumn.AllowEdit = false;
            ngc = _gcCheckView.Columns.AddVisible("Type", "Тип");
            ngc.OptionsColumn.AllowEdit = false;
            ngc = _gcCheckView.Columns.AddVisible("DimsItem", "Ед.изм.");
            ngc.ColumnEdit = _leCheck;
            ngc = _gcCheckView.Columns.AddVisible("Value", "Значение");


            // Инициализация габаритов
            _gleDims.Properties.DataSource = DSInDims;
            _gleDims.Properties.DisplayMember = "PropName";
            _gleDims.Properties.ValueMember = "PropUid";
            _gleDimsView.Columns.Clear();
            _gleDimsView.Columns.AddVisible("PropName", "Габарит");

            // Инициализация характеристик
            _gleProp.Properties.DataSource = DSInProps;
            _gleProp.Properties.DisplayMember = "PropName";
            _gleProp.Properties.ValueMember = "PropUid";
            _glePropView.Columns.Clear();
            _glePropView.Columns.AddVisible("PropName", "Габарит");


        }
        private void FillDataSources()
        {
            DSOutCB.Add(new DimsRow() { DimsItem = 1, Name = "001" });
            DSOutCB.Add(new DimsRow() { DimsItem = 2, Name = "002" });
            DSOutCB.Add(new DimsRow() { DimsItem = 3, Name = "003" });

            DSOut.Add(new OutRow() { Name = "11", DimsItem = 1 });
            DSOut.Add(new OutRow() { Name = "22", DimsItem = 2 });
            DSOut.Add(new OutRow() { Name = "33", DimsItem = 3 });

            DSCheckCB.Add(new DimsRow() { DimsItem = 3, Name = "003" });
            DSCheckCB.Add(new DimsRow() { DimsItem = 4, Name = "004" });
            DSCheckCB.Add(new DimsRow() { DimsItem = 5, Name = "005" });

            DSCheck.Add(new CheckRow() { Name = "11", Type = "22", DimsItem = 3, Value = 44.22 });
            DSCheck.Add(new CheckRow() { Name = "11", Type = "22", DimsItem = 4, Value = 44.22 });

            DSInDims.Add(new InRow() { PropUid = new Guid(), PropName = "Габарит 01" });
            DSInDims.Add(new InRow() { PropUid = new Guid(), PropName = "Габарит 02" });
            DSInDims.Add(new InRow() { PropUid = new Guid(), PropName = "Габарит 03" });

            DSInProps.Add(new InRow() { PropUid = new Guid(), PropName = "Характеристика 01" });
            DSInProps.Add(new InRow() { PropUid = new Guid(), PropName = "Характеристика 02" });
            DSInProps.Add(new InRow() { PropUid = new Guid(), PropName = "Характеристика 03" });
        }

        // DataSources
        private EditableList<OutRow> DSOut = new EditableList<OutRow>();                 //для грида формул
        private EditableList<DimsRow> DSOutCB = new EditableList<DimsRow>();             //для комбо грида формул
        private EditableList<CheckRow> DSCheck = new EditableList<CheckRow>();           //для грида проверки
        private EditableList<DimsRow> DSCheckCB = new EditableList<DimsRow>();           //для комбо грида проверки
        private EditableList<InRow> DSInDims = new EditableList<InRow>();                //для комбо габаритов
        private EditableList<InRow> DSInProps = new EditableList<InRow>();               //для комбо характеристик

        #region IDimsView
        public EditableList<OutRow> _DSOut { get { return DSOut; }  }
        public EditableList<DimsRow> _DSOutCB { get { return _DSOutCB; } }
        public EditableList<CheckRow> _DSCheckCB { get { return _DSCheckCB; } }
        public EditableList<InRow> _DSInDims { get { return _DSInDims; } }
        public EditableList<InRow> _DSInProps { get { return _DSInProps; } }

        public OutRow SelectedOutRow
        {
            get { return DSOut.First(f => f.DimsItem == (int?)_gcOutView.GetFocusedRowCellValue("DimsItem")); }
        }
        public CheckRow SelectedCheckRow
        {
            get { return DSCheck.First(f => f.DimsItem == (int?)_gcCheckView.GetFocusedRowCellValue("DimsItem")); }
        }
        public InRow SelectedDim
        {
            get { return (InRow)_gleDims.GetSelectedDataRow(); }
        }
        public InRow SelectedProp
        {
            get { return (InRow)_gleProp.GetSelectedDataRow(); }
        }
        public string Formula
        {
            get { return _reFormula.RichText; }
            set { _reFormula.RichText = value; }
        }

        public event EventHandler AddClicked;
        public event EventHandler DeleteClicked;
        public event EventHandler CheckClicker;
        public event EventHandler _leOutChanged;
        public event EventHandler _leCheckChanged;
        public event EventHandler _glePropChanged;
        public event EventHandler _gleDimsChanged;

        #endregion

        private RepositoryItemLookUpEdit _leOut = new RepositoryItemLookUpEdit();
        private RepositoryItemLookUpEdit _leCheck = new RepositoryItemLookUpEdit();

        #region events
        private void _leCheck_EditValueChanged(object sender, EventArgs e)
        {
            _leCheckChanged?.Invoke(this, new EventArgs());
        }

        private void _leOut_EditValueChanged(object sender, EventArgs e)
        {
            _leOutChanged?.Invoke(this, new EventArgs());
        }

        private void _gleProp_EditValueChanged(object sender, EventArgs e)
        {
            _glePropChanged?.Invoke(this, new EventArgs());
        }

        private void _gleDims_EditValueChanged(object sender, EventArgs e)
        {
            _gleDimsChanged?.Invoke(this, new EventArgs());
        }

        private void _sbCheck_Click(object sender, EventArgs e)
        {
            CheckClicker?.Invoke(this, new EventArgs());
        }

        private void _sbDelete_Click(object sender, EventArgs e)
        {
            DeleteClicked?.Invoke(this, new EventArgs());
        }

        private void _sbAdd_Click(object sender, EventArgs e)
        {
            AddClicked?.Invoke(this, new EventArgs());
        }
        #endregion
    }
    public class OutRow 
    {
        public string Name { get; set; }
        public int DimsItem { get; set; }
        public string Formula { get; set; }
    }
    public class CheckRow
    {
        public string Name { get; set; }
        public string Type { get; set; }
        public int DimsItem { get; set; }
        public double Value { get; set; }
    }
    public class DimsRow
    {
        public int DimsItem { get; set; }
        public string Name { get; set; }
    }
    public class InRow
    {
        public Guid PropUid { get; set; }
        public string PropName { get; set; }
    }

}
      
